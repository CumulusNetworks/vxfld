#! /usr/bin/python
# vim: tabstop=4 shiftwidth=4 softtabstop=4

# Copyright 2014 Cumulus Networks, Inc. All rights reserved.
# Copyright (C) 2014 Metacloud Inc.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.
# 51 Franklin Street, Fifth Floor
# Boston, MA  02110-1301, USA.

"""
Main Sections in the code.  Used to try keep some organization

    Control Interface
    Replicator packet handling functions
    vxfld msg handling
    Forwarding Database, db management and query
    Miscellaneous
    Run loop
    Python main with initial setup
"""


import sys
import socket
import select
import threading
import dpkt
import time
import signal
import errno
import vxfld.common
import vxfld.vxfldpkt
import udp
import ip

########################################################################
#
# Management interface
#
from vxfld.mgmtserver import MgmtServer

class VxsndMgmtServer(MgmtServer):
    def process(self, msg):
	# Returns result object and Exception.  Latter would be
	# None if everything is good

	# get global lock before doing anything
	global_lock.acquire()

	try:
	    if msg['fdb']:
		ret = (fdb, None)
	    else:
		ret = (None, RuntimeError('Unknown request'))
	except:
	    ret = (None, RuntimeError('Bad message'))

	global_lock.release()
	return ret



########################################################################
#
# Replicator packet handling
#


class VXLAN(dpkt.Packet):
    """
    VXLAN header parsing/editing.  Derived from DPKT and so dpkt module
    must be installed.

    VLXAN per draft-mahalingam-dutt-dcops-vxlan-00.txt
    The packing is pretty funky, so the two fields that actually matter;
    the I flag and VNI are formed as properties (i and vni) in the constructor
    as opposed to the dpkt header formatter.
    """

    __hdr__ = (
        ('flags', 'B', 0x08),
        ('r', '3s', '\x00' * 3),
        ('vni_r', 'I', 0x0),
    )

    @property
    def i(self):
        return ((self.flags >> 3) & 0x1)

    @i.setter
    def i(self, i):
        self.flags = ((self.flags & 0x08) | (i << 3))

    @property
    def vni(self):
        return ((self.vni_r >> 8) & 0x00ffffff)

    @vni.setter
    def vni(self, vni):
        self.flags = ((self.vni_r & 0x00ffffff) | (vni << 8))


def handle_vxlan_packet(pkt, addr):
    """ The entry point from the sock receive. """
    (srcip, srcport) = addr
    v = VXLAN(pkt)

    if not v.i:
        return

    fwd_list = fdb_addrs(v.vni)
    in_fdb = False
    if fwd_list:
        udp_packet = udp.Packet(sport=srcport,
                                dport=conf.vxlan_port,
                                data=pkt)
        udp_packet = udp.assemble(udp_packet, cksum=conf.enable_udp_chksum)

        # Its quicker to do a string replace of the dstip for each VTEP
        # rather then building an new packet each time. As such start
        # with a non-sensical dstip.
        ip_packet = ip.Packet(src=srcip,
                              dst=srcip,
                              ttl=64,
                              p=socket.IPPROTO_UDP)
        ip_packet.data = udp_packet
        # Don't calculcate cksum since the hardware will do that for us.
        packet = ip.assemble(ip_packet, cksum=False)

        for dstip in fwd_list:
            if dstip == srcip:
                in_fdb = True
                continue
            if conf.debug:
                lgr.debug("Sending packet from %s to %s, vni %s" % (srcip,
                                                                    dstip,
                                                                    v.vni))
            # Set the dstip in the packet directly to avoid re-packing the
            # whole packet each time.
            if dstip in aton_cache:
                dst = aton_cache[dstip]
            else:
                dst = socket.inet_aton(dstip)
                aton_cache[dstip] = dst
            packet = packet[:16] + dst + packet[20:]

            if not conf.no_flood:
                # Only have socket if flooding
                tsock.sendto(packet, (dstip, 0))

    if not in_fdb:
        #  Add this <vni, srcip> to the fdb and tell peers about it
        lgr.info("Learning ip %s, vni %d from VXLAN pkt" % (srcip, v.vni))
        fdb_add(v.vni, srcip, int(time.time()) + conf.holdtime)
        pkt = vxfld.vxfldpkt.Refresh(holdtime=conf.holdtime, originator=False)
        pkt.add_vni_vteps({v.vni: [srcip]})
        send_to_peers(pkt)


def print_pkt(pkt):
    """ Simple print of packet.  Useful for debugging. """

    cnt = 0
    for I in str(pkt):
        print "%02x" % ord(I),
        if cnt % 16 == 15:
            print
        cnt += 1
    print


########################################################################
#
# vxfld message handling
#
def handle_vxfld_msg(buf, addr):
    """ This is the entry function for the vxfld message.

    For now we expect only a refresh message and so creates one of that
    class for any received message.  In future, it will create a
    vxfldpkt object of the correct class based on the msg type
    """

    (srcip, srcport) = addr

    pkt = vxfld.vxfldpkt.Refresh(buf)
    if pkt.type != vxfld.vxfldpkt.MsgType.refresh:
        lgr.warn('Unexpected vxfld pkt of type %d' % pkt.type)
        return

    lgr.info('Refresh msg from %s: %s' % (srcip, str(pkt.vni_vteps)))

    ageout = int(time.time()) + pkt.holdtime
    for (vni, iplist) in pkt.vni_vteps.items():
        for ip in iplist:
            fdb_add(vni, ip, ageout)

    if pkt.originator:
        # Send on to all peers but set originator to 0 so that they do
        # not forward on
        pkt.originator = 0
        send_to_peers(pkt)


def send_to_peers(pkt):
    for peer in conf.servers:
        # TODO Skip myself!
        psock.sendto(str(pkt), (peer, conf.vxfld_port))


########################################################################
#
# Forwarding DB
#

# Data structure is a dict of dicts
#    fdb[vni] = {addr1: ageout1, addr2: ageout2, ... }
#


def fdb_add(vni, addr, ageout):
    """
    Add this <vni, addr> to the fdb.  Just updates the ageout if tuple is
    already in the fdb
    """

    vni_dict = fdb.get(vni, dict())
    vni_dict[addr] = ageout
    fdb[vni] = vni_dict


def fdb_addrs(vni):
    vni_dict = fdb.get(vni, dict())
    return vni_dict.keys()


def fdb_ageout():
    now = int(time.time())
    for (vni, vni_dict) in fdb.items():
        for (addr, ageout) in vni_dict.items():
            if now > ageout:
                if conf.debug:
                    lgr.debug('Ageing out ip %s, vni %d' % (addr, vni))
                del vni_dict[addr]
        if not len(vni_dict):
            del fdb[vni]


def dump_fdb():
    # This dumps the fdb as json formatted string.  The receiver of
    # this can format as it likes.
    import json

    now = int(time.time())

    adjusted = {}
    for vni in sorted(fdb, key=fdb.get):
        adjusted[vni] = {}
        fwdlist = fdb[vni]
        for addr in sorted(fwdlist, key=fwdlist.get):
            holdtime = fwdlist[addr] - now
            adjusted[vni][addr] = holdtime

    return json.dumps(adjusted)


def print_fdb(signum=None, frame=None):
    # TODO A better job of formatting output
    lgr.info("Forwarding Database:\n%s" % dump_fdb())


########################################################################
#
# Miscellaneous
#


def add_ip_addr():
    # TODO
    pass


def del_ip_addr():
    # TODO
    pass


########################################################################
#
# Run Loop
#


def run():
    global rsock
    global tsock
    global psock  # socket for vxflood protocol pkts

    # Install anycast address on lo and associated cleanup on exit
    if conf.install_addr:
        if conf.address == '0.0.0.0':
            raise RuntimError('Cannot install ANY addr on loopback IF')
        add_ip_addr()
        atexit.register(del_ip_addr)

    # Start the mgmt server

    # Inclusion of this mgmt interface which runs in its own thread
    # necessitates some concurrency control.  The solution (for now)
    # is a global lock that a thread acquires before doing anything
    # and releases when it goes into a wait state.

    global global_lock
    global_lock = threading.Lock()
    # main thread starts off with the lock, releases it on going into
    # wait.
    global_lock.acquire()

    mgmtserver = VxsndMgmtServer(conf.udsfile)
    mgmtserver.start()

    # open the sockets
    #
    try:
        rsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Set SO_RCVBUF
        # NOTE(cfb): Setting SO_RCVBUF results in the size being 2x the bytes
        #            passed to the setsockopt call. As such we pass it as
        #            size/2.
        rsock.setsockopt(socket.SOL_SOCKET,
                         socket.SO_RCVBUF,
                         conf.receive_queue/2)
        rsock.settimeout(1)
        rsock.bind((conf.address, conf.vxlan_port))
        if not conf.no_flood:
            # Don't create this if not flooding.  Then I can run non-root
            tsock = socket.socket(socket.AF_INET,
                                  socket.SOCK_RAW,
                                  socket.IPPROTO_RAW)
        psock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        psock.settimeout(1)
        psock.bind(("0.0.0.0", conf.vxfld_port))

    except socket.error as e:
        raise RuntimeError("opening receive and transmit sockets : " + str(e))

    next_ageout = 0

    while True:
	global_lock.release()
        readable = ()
        writeable = ()
        errored = ()
        try:
            # Nothing to do but wait for an event on a sock.  It's ok
            # to delay ageout of fdb indefinitely
            readable, writeable, errored = select.select([rsock, psock],
                                                         [],
                                                         [])
        except select.error as e:
            if e[0] != errno.EINTR:
                raise
	global_lock.acquire()

        # We just woke up so age out old entries
        now = int(time.time())
        if now >= next_ageout:
            fdb_ageout()
            next_ageout = now + conf.age_check

        for s in readable:
            try:
                (pkt, addr) = s.recvfrom(conf.max_packet_size)
            except Exception as e:
                # Socket not ready, buffer overflow etc
                lgr.error("%s" % type(e))
                continue
            if s is rsock:
                handle_vxlan_packet(pkt, addr)
            elif s is psock:
                handle_vxfld_msg(pkt, addr)
            else:
                lgr.error("Unknown socket in readable list")


########################################################################
#
# Main
#
# Process cmd line args, do setup and then run
#

# Set up argparse with common args and then vxrd-specific ones
prsr = vxfld.common.common_parser()
prsr.add_argument('-s', '--servers',
                  help='A list of servers, separated by spaces, to which '
                       'registration information is forwarded.  May be '
                       ' hostnames or IP addresses')

# For debugging and running non-sudo.  Disables bind to raw socket
prsr.add_argument('-R', '--no-flood',
                  action='store_true',
                  help='Turn off flooding')

# Packet level debugging, makes packet processing take twice as long.
prsr.add_argument('-D', '--debug',
                  action='store_true',
                  help='Turn on extra debug mode')

args = prsr.parse_args()

conf, lgr = vxfld.common.initial_setup(args)

# Now the initialization not common

# Sig handler to dump the fdb
# Could remove this when we have proper ctl program to query the daemon
signal.signal(signal.SIGUSR1, print_fdb)

# Setup some variables we need
fdb = dict()
aton_cache = dict()

# Start monitoring
if conf.monitor:
    vxfld.common.start_monit('vxsnd')

try:
    if conf.debug:
        conf.set_param('loglevel', 'DEBUG')
    sys.exit(run())
except KeyboardInterrupt:
    sys.stderr.write("Warning: keyboard abort\n")
    sys.exit(1)
except RuntimeError as inst:
    sys.stderr.write("ERROR: %s\n" % str(inst))
    sys.exit(1)
