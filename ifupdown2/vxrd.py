# vim: tabstop=4 shiftwidth=4 softtabstop=4
# Copyright 2015 Cumulus Networks, Inc. All rights reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.
# 51 Franklin Street, Fifth Floor
# Boston, MA  02110-1301, USA.
""" This module provides classes that contain methods used by the ifupdown2
utility to override vxrd's default configuration.
"""
import json
import os
import time

from ifupdownaddons.modulebase import moduleBase as ModuleBase

from vxfld.common.config import Config
from vxfld.common.enums import (
    ConfigSection,
    DefaultConfFile,
    DefaultPidFile,
    DefaultUdsFile,
    NodeType
)
from vxfld.common import utils


class vxrd(ModuleBase):  # pylint: disable=invalid-name
    """ Provides callback methods invoked by the ifupdown2 utility to
    override the VXLAN registration daemon's configuration.
    """
    # pylint: disable=too-few-public-methods
    __VXRD_SRC_IP_KEY = 'vxrd-src-ip'
    __VXRD_REMOTE_IP_KEY = 'vxrd-svcnode-ip'

    _modinfo = {
        'mhelp': 'This module overrides vxrd\'s configuration.',
        'attrs': {
            __VXRD_SRC_IP_KEY: {
                'help': 'The source address of the registration daemon',
                'required': True,
                'example': ['%s 10.10.10.2' % __VXRD_SRC_IP_KEY]
            },
            __VXRD_REMOTE_IP_KEY: {
                'help': 'The address of the registration service',
                'required': True,
                'example': ['%s 10.10.10.3' % __VXRD_REMOTE_IP_KEY]
            }

        }
    }

    __OVERRIDE_FILE_PATH = DefaultConfFile.VXRD + '.override'

    __AUTOGEN_FILE_HEADER = (
        '# Dynamic vxrd file is under control of ifupdown2\n'
        '# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n'
        '# Generated at: %s\n' % time.asctime()
    )

    __IFUPDOWN_TO_SERVICE_MAPPING = {
        __VXRD_SRC_IP_KEY: Config.CommonConfig.src_ip.name,
        __VXRD_REMOTE_IP_KEY: Config.CommonConfig.svcnode_ip.name
    }

    def __init__(self, *args, **kwargs):
        super(vxrd, self).__init__(*args, **kwargs)

    def __post_up(self, ifaceobj):
        """ Extracts the IP addresses of the registration and replication
        services from the loopback interface's configuration.
        Subsequently, it overrides the registration daemon's default
        configuration and restarts the service.
        :param ifaceobj: iface object
        :return: None if successful, otherwise raises an Exception.
        """
        output_buffer = []
        restart_required = False
        runtime_config = self.__get_running_config()
        for ifupdown_name, service_name in \
                self.__IFUPDOWN_TO_SERVICE_MAPPING.iteritems():
            conf_val = ifaceobj.get_attr_value_first(ifupdown_name)
            runtime_val = runtime_config.get(service_name, None)
            if conf_val is not None:
                output_buffer.append('%s=%s\n' % (service_name, conf_val))
                restart_required |= (runtime_val != conf_val)
        if output_buffer:
            try:
                with open(self.__OVERRIDE_FILE_PATH, "w+") as fobj:
                    fobj.write(self.__AUTOGEN_FILE_HEADER)
                    fobj.write('[%s]\n' % ConfigSection.COMMON)
                    fobj.write('\n'.join(output_buffer))
            except Exception as ex:  # pylint: disable=broad-except
                raise 'Error generating vxrd override file (%s)' % ex
            else:
                if restart_required:
                    self.__vxrd_restart()

    def __pre_down(self, _):
        """ Removes the override configuration and restarts the VXLAN
        registration daemon when the loopback interface is brought down.
        :return: None if successful, otherwise raises an Exception.
        """
        if os.path.exists(self.__OVERRIDE_FILE_PATH):
            try:
                os.remove(self.__OVERRIDE_FILE_PATH)
            except Exception as ex:  # pylint: disable=broad-except
                raise 'Error removing vxrd override file (%s)' % ex
            else:
                self.__vxrd_restart()

    def __get_running_config(self):
        """ Returns vxrd's runtime configuration.
        :return: The registration daemon's runtime configuration or an empty
        dictionary.
        """
        try:
            if (os.path.exists(DefaultPidFile.VXRD) and
                    utils.Pidfile(DefaultPidFile.VXRD, NodeType.VXRD).
                    is_running() and
                    os.path.exists(DefaultUdsFile.VXRD)):
                return json.loads(
                    self.exec_command('/usr/bin/vxrdctl -j get config')
                )
        except Exception:  # pylint: disable=broad-except
            # Ignore the error
            pass
        return {}

    def __vxrd_restart(self):
        """ Restarts the vxrd service.
        """
        self.exec_command('/usr/sbin/service vxrd restart')

    def run(self, ifaceobj, operation, *_, **dummy):
        """ Overrides vxrd's configuration using attributes configured under
        the loopback interface.
        :param ifaceobj: iface object
        :param operation: any of 'post-up', 'pre-down'
        """
        if ifaceobj.name != 'lo':
            return
        if operation == 'post-up':
            self.__post_up(ifaceobj)
        elif operation == 'pre-down':
            self.__pre_down(ifaceobj)
